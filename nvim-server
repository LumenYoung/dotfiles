#!/usr/bin/env python3
import os
import signal
import subprocess
import sys
from pathlib import Path
import shutil  # Import shutil to use shutil.which

nvim_process = None

NVIM_SCRIPT_TEMPLATE = """#!/bin/bash
exec {zsh_path} << EOF
exec nvim --headless --listen localhost:{port} .
EOF
"""


def start_nvim(path, port):
    global nvim_process
    zsh_path = shutil.which("zsh")  # Get the full path to zsh
    if not zsh_path:
        print("[SERVER] Error: zsh executable not found")
        sys.exit(1)

    # Create a shell script to execute zsh and then start Neovim
    script = NVIM_SCRIPT_TEMPLATE.format(zsh_path=zsh_path, port=port)
    script_path = os.path.join(path, "start_nvim.sh")
    with open(script_path, "w") as f:
        f.write(script)
    os.chmod(script_path, 0o755)  # Make the script executable

    nvim_process = subprocess.Popen(
        script_path,
        shell=True,
        cwd=str(path),
        preexec_fn=os.setsid,  # This creates a new process group
    )
    return nvim_process


def terminate_nvim():
    global nvim_process
    if nvim_process:
        print("[SERVER] Terminating Neovim instance...")
        try:
            os.killpg(os.getpgid(nvim_process.pid), signal.SIGTERM)
            nvim_process.wait(timeout=5)  # Wait up to 5 seconds for termination
        except subprocess.TimeoutExpired:
            print("[SERVER] Neovim didn't terminate gracefully. Forcing termination...")
            os.killpg(os.getpgid(nvim_process.pid), signal.SIGKILL)
        nvim_process = None

    # Clean up the temporary script file
    script_path = os.path.join(Path(sys.argv[1]).resolve(), "start_nvim.sh")
    if os.path.exists(script_path):
        os.remove(script_path)


def signal_handler(signum, frame):
    if signum == signal.SIGHUP:
        print("[SERVER] Received SIGHUP. Shutting down...")
    else:
        print("[SERVER] Received termination signal. Shutting down...")
    terminate_nvim()
    if nvim_process:
        os.killpg(os.getpgid(nvim_process.pid), signal.SIGTERM)
    sys.exit(0)


def main():
    if len(sys.argv) != 3:
        print("[SERVER] Usage: nvim-server <path> <port>")
        sys.exit(1)

    path = Path(sys.argv[1]).resolve()
    port = int(sys.argv[2])

    if not path.exists():
        print(f"[SERVER] Error: Path {path} does not exist")
        sys.exit(1)

    print(f"[SERVER] Starting Neovim server in directory: {path}")
    print(f"[SERVER] Listening on port: {port}")

    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGHUP, signal_handler)
    signal.signal(signal.SIGUSR1, signal_handler)  # Add handler for SIGUSR1

    try:
        while True:
            nvim_process = start_nvim(path, port)
            print("[SERVER] Neovim instance started")

            try:
                nvim_process.wait()
            except KeyboardInterrupt:
                print("[SERVER] Keyboard interrupt received. Shutting down...")
                break
            finally:
                terminate_nvim()

            print("[SERVER] Neovim instance terminated. Restarting...")
    finally:
        if nvim_process:
            os.killpg(os.getpgid(nvim_process.pid), signal.SIGTERM)
        terminate_nvim()


if __name__ == "__main__":
    main()

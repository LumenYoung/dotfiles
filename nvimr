#!/usr/bin/env python3
import sys
import os
import signal
import random
import socket
import argparse
import asyncio


def is_port_free(port):
    # Check if a port is available on the local machine
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(("localhost", port)) != 0


def find_free_port():
    # Find a random free port between 3000 and 6000
    while True:
        port = random.randint(3000, 6000)
        if is_port_free(port):
            return port


def parse_arguments():
    parser = argparse.ArgumentParser(description="Remote Neovim launcher")
    parser.add_argument("server_path", help="<ssh-host>:<edit-directory-or-file>")
    parser.add_argument("--debug", action="store_true", help="Enable debug output")
    return parser.parse_args()


async def wait_for_neovim_server(port, max_attempts=10, debug=False):
    for attempt in range(max_attempts):
        try:
            if debug:
                print(
                    f"[CLIENT] Attempting to connect to Neovim server on port {port} (attempt {attempt + 1})"
                )
            _, writer = await asyncio.wait_for(
                asyncio.open_connection("localhost", port), timeout=5.0
            )
            writer.close()
            await writer.wait_closed()
            if debug:
                print(f"[CLIENT] Neovim server is ready after {attempt + 1} attempts")
            return True
        except asyncio.TimeoutError:
            if debug:
                print(f"[CLIENT] Attempt {attempt + 1} timed out, retrying...")
        except Exception as e:
            if debug:
                print(f"[CLIENT] Attempt {attempt + 1} failed: {str(e)}, retrying...")
        await asyncio.sleep(
            2**attempt * 0.1
        )  # Exponential backoff with shorter initial waits
    print("[CLIENT] Neovim server didn't start in time")
    return False


async def run_neovide(port, debug=False):
    while True:
        try:
            process = await asyncio.create_subprocess_exec(
                "neovide",
                f"--server=localhost:{port}",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
            )
            _, stderr = await process.communicate()
            error_output = stderr.decode()

            if "Neovide requires nvim version 0.10.0 or higher" in error_output:
                print("[CLIENT] Error: Neovide Connect Error. Retrying...")
                await asyncio.sleep(1)  # Add a small delay before retrying
                continue
            elif process.returncode == 0:
                print("[CLIENT] Neovide exited normally. Terminating.")
                break
            elif process.returncode == 1:
                if debug:
                    print("[CLIENT] Restarting Neovide...")
            else:
                print(f"[CLIENT] Neovide exited with code: {process.returncode}")
                if debug:
                    print(f"[CLIENT] Error output: {error_output}")
                print("[CLIENT] Terminating due to unexpected error.")
                break
        except Exception as e:
            print(f"[CLIENT] An error occurred while running Neovide: {e}")
            break


async def main():
    args = parse_arguments()
    server, path = args.server_path.split(":", 1)
    port = find_free_port()

    print(f"[CLIENT] Using local port {port} for SSH forwarding")

    # Command to start the remote nvim-server with SSH port forwarding
    remote_nvim_command = f"ssh -L {port}:localhost:{port} {server} 'PATH=$HOME/.local/bin:$PATH nvim-server {path} {port}'"

    if args.debug:
        print("[CLIENT] Debug: Remote nvim-server command:")
        print(remote_nvim_command)

    try:
        # Start remote Neovim server with SSH port forwarding
        ssh_process = await asyncio.create_subprocess_shell(
            remote_nvim_command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            preexec_fn=os.setsid,  # This creates a new process group
        )

        if args.debug:
            print("[CLIENT] SSH process started. Waiting for Neovim to be ready...")

        # Start a task to read SSH process output
        asyncio.create_task(log_ssh_output(ssh_process, args.debug))

        # Wait for Neovim server to be ready
        if await wait_for_neovim_server(port, debug=args.debug):
            if args.debug:
                print("[CLIENT] Neovim is ready. Starting Neovide...")
            await run_neovide(port, debug=args.debug)
        else:
            print("[CLIENT] Failed to connect to Neovim server. Exiting...")

    except asyncio.CancelledError:
        print("[CLIENT] Async operation cancelled. Exiting...")
    except Exception as e:
        print(f"[CLIENT] An error occurred: {e}")
    finally:
        print("[CLIENT] Terminating SSH connection and remote processes...")
        # Send SIGTERM to the entire process group
        os.killpg(os.getpgid(ssh_process.pid), signal.SIGTERM)
        await ssh_process.wait()

    # Handle termination signals
    def signal_handler(signum, frame):
        print("[CLIENT] Received termination signal. Shutting down...")
        os.killpg(os.getpgid(ssh_process.pid), signal.SIGTERM)
        os.killpg(os.getpgid(ssh_process.pid), signal.SIGUSR1)  # Send SIGUSR1 to nvim-server
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def log_ssh_output(process, debug):
    while True:
        line = await process.stdout.readline()
        if not line:
            break
        if debug:
            print(f"[SSH] {line.decode().strip()}")


if __name__ == "__main__":
    asyncio.run(main())

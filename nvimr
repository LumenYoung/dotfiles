#!/usr/bin/env python3
import random
import subprocess
import socket
import argparse
import time


def is_port_free(port):
    # Check if a port is available on the local machine
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(("localhost", port)) != 0


def find_free_port():
    # Find a random free port between 3000 and 6000
    while True:
        port = random.randint(3000, 6000)
        if is_port_free(port):
            return port


def parse_arguments():
    parser = argparse.ArgumentParser(description="Remote Neovim launcher")
    parser.add_argument("server_path", help="<ssh-host>:<edit-directory-or-file>")
    parser.add_argument("--debug", action="store_true", help="Enable debug output")
    return parser.parse_args()


def main():
    args = parse_arguments()
    server, path = args.server_path.split(":", 1)
    port = find_free_port()

    print(f"[CLIENT] Using local port {port} for SSH forwarding")

    # Command to start the remote nvim-server with SSH port forwarding
    remote_nvim_command = (
        f"ssh -L {port}:localhost:{port} {server} 'nvim-server {path} {port}'"
    )

    if args.debug:
        print("[CLIENT] Debug: Remote nvim-server command:")
        print(remote_nvim_command)

    try:
        # Start remote Neovim server with SSH port forwarding
        ssh_process = subprocess.Popen(remote_nvim_command, shell=True)

        if args.debug:
            print("[CLIENT] Waiting for Neovim to be ready...")

        # Simple wait for Neovim to be ready
        time.sleep(0.8)

        if args.debug:
            print("[CLIENT] Neovim is ready. Starting Neovide...")

        while True:
            try:
                # Start Neovide locally and connect to the forwarded port
                result = subprocess.run(
                    ["neovide", f"--server=localhost:{port}"],
                    check=False,
                    capture_output=True,
                    text=True
                )
                error_output = result.stderr

                if "Neovide requires nvim version 0.10.0 or higher" in error_output:
                    print("[CLIENT] Error: Neovide Connect Error. Retrying...")
                    time.sleep(1)  # Add a small delay before retrying
                    continue
                elif result.returncode == 0:
                    print("[CLIENT] Neovide exited normally. Terminating.")
                    break
                elif result.returncode == 1:
                    if args.debug:
                        print("[CLIENT] Restarting Neovide...")
                else:
                    print(f"[CLIENT] Neovide exited with code: {result.returncode}")
                    if args.debug:
                        print(f"[CLIENT] Error output: {error_output}")
                    print("[CLIENT] Terminating due to unexpected error.")
                    break
            except Exception as e:
                print(f"[CLIENT] An error occurred while running Neovide: {e}")
                break

    except KeyboardInterrupt:
        print("[CLIENT] Keyboard interrupt received. Exiting...")
    except subprocess.CalledProcessError as e:
        print(f"[CLIENT] Error running remote nvim-server: {e}")
    except Exception as e:
        print(f"[CLIENT] An error occurred: {e}")
    finally:
        print("[CLIENT] Terminating SSH connection...")
        ssh_process.terminate()
        ssh_process.wait()


if __name__ == "__main__":
    main()
